/*
 * Main service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.CategoryDto;
import io.swagger.client.model.CompilationDto;
import io.swagger.client.model.EventFullDto;
import io.swagger.client.model.EventShortDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Public_Api {
    private ApiClient apiClient;

    public Public_Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Public_Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCategories
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCategoriesCall(Integer from, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCategoriesValidateBeforeCall(Integer from, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCategoriesCall(from, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Получение категорий
     * 
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @return List&lt;CategoryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CategoryDto> getCategories(Integer from, Integer size) throws ApiException {
        ApiResponse<List<CategoryDto>> resp = getCategoriesWithHttpInfo(from, size);
        return resp.getData();
    }

    /**
     * Получение категорий
     * 
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CategoryDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CategoryDto>> getCategoriesWithHttpInfo(Integer from, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getCategoriesValidateBeforeCall(from, size, null, null);
        Type localVarReturnType = new TypeToken<List<CategoryDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получение категорий (asynchronously)
     * 
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCategoriesAsync(Integer from, Integer size, final ApiCallback<List<CategoryDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCategoriesValidateBeforeCall(from, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CategoryDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCategory
     * @param catId id категории (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCategoryCall(Long catId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/categories/{catId}"
            .replaceAll("\\{" + "catId" + "\\}", apiClient.escapeString(catId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCategoryValidateBeforeCall(Long catId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'catId' is set
        if (catId == null) {
            throw new ApiException("Missing the required parameter 'catId' when calling getCategory(Async)");
        }
        
        com.squareup.okhttp.Call call = getCategoryCall(catId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Получение информации о категории по её идентификатору
     * 
     * @param catId id категории (required)
     * @return CategoryDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CategoryDto getCategory(Long catId) throws ApiException {
        ApiResponse<CategoryDto> resp = getCategoryWithHttpInfo(catId);
        return resp.getData();
    }

    /**
     * Получение информации о категории по её идентификатору
     * 
     * @param catId id категории (required)
     * @return ApiResponse&lt;CategoryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CategoryDto> getCategoryWithHttpInfo(Long catId) throws ApiException {
        com.squareup.okhttp.Call call = getCategoryValidateBeforeCall(catId, null, null);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получение информации о категории по её идентификатору (asynchronously)
     * 
     * @param catId id категории (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCategoryAsync(Long catId, final ApiCallback<CategoryDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCategoryValidateBeforeCall(catId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCompilation
     * @param compId id подборки (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompilationCall(Long compId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/compilations/{compId}"
            .replaceAll("\\{" + "compId" + "\\}", apiClient.escapeString(compId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompilationValidateBeforeCall(Long compId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'compId' is set
        if (compId == null) {
            throw new ApiException("Missing the required parameter 'compId' when calling getCompilation(Async)");
        }
        
        com.squareup.okhttp.Call call = getCompilationCall(compId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Получение подборки событий по его id
     * 
     * @param compId id подборки (required)
     * @return CompilationDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompilationDto getCompilation(Long compId) throws ApiException {
        ApiResponse<CompilationDto> resp = getCompilationWithHttpInfo(compId);
        return resp.getData();
    }

    /**
     * Получение подборки событий по его id
     * 
     * @param compId id подборки (required)
     * @return ApiResponse&lt;CompilationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompilationDto> getCompilationWithHttpInfo(Long compId) throws ApiException {
        com.squareup.okhttp.Call call = getCompilationValidateBeforeCall(compId, null, null);
        Type localVarReturnType = new TypeToken<CompilationDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получение подборки событий по его id (asynchronously)
     * 
     * @param compId id подборки (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompilationAsync(Long compId, final ApiCallback<CompilationDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompilationValidateBeforeCall(compId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompilationDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCompilations
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompilationsCall(Boolean pinned, Integer from, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/compilations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pinned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pinned", pinned));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompilationsValidateBeforeCall(Boolean pinned, Integer from, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCompilationsCall(pinned, from, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Получение подборок событий
     * 
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return List&lt;CompilationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CompilationDto> getCompilations(Boolean pinned, Integer from, Integer size) throws ApiException {
        ApiResponse<List<CompilationDto>> resp = getCompilationsWithHttpInfo(pinned, from, size);
        return resp.getData();
    }

    /**
     * Получение подборок событий
     * 
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CompilationDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CompilationDto>> getCompilationsWithHttpInfo(Boolean pinned, Integer from, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getCompilationsValidateBeforeCall(pinned, from, size, null, null);
        Type localVarReturnType = new TypeToken<List<CompilationDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получение подборок событий (asynchronously)
     * 
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompilationsAsync(Boolean pinned, Integer from, Integer size, final ApiCallback<List<CompilationDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompilationsValidateBeforeCall(pinned, from, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CompilationDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvent1
     * @param id id события (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEvent1Call(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEvent1ValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEvent1(Async)");
        }
        
        com.squareup.okhttp.Call call = getEvent1Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Получение подробной информации об опубликованном событии по его идентификатору
     * Обратите внимание: - событие должно быть опубликовано - информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param id id события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventFullDto getEvent1(Long id) throws ApiException {
        ApiResponse<EventFullDto> resp = getEvent1WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Получение подробной информации об опубликованном событии по его идентификатору
     * Обратите внимание: - событие должно быть опубликовано - информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param id id события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventFullDto> getEvent1WithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getEvent1ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получение подробной информации об опубликованном событии по его идентификатору (asynchronously)
     * Обратите внимание: - событие должно быть опубликовано - информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param id id события (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEvent1Async(Long id, final ApiCallback<EventFullDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEvent1ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvents1
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEvents1Call(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (categories != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "categories", categories));
        if (paid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paid", paid));
        if (rangeStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        if (rangeEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        if (onlyAvailable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyAvailable", onlyAvailable));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEvents1ValidateBeforeCall(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getEvents1Call(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Получение событий с возможностью фильтрации
     * Обратите внимание:  - это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события - текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв - если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени - информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @return List&lt;EventShortDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EventShortDto> getEvents1(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size) throws ApiException {
        ApiResponse<List<EventShortDto>> resp = getEvents1WithHttpInfo(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size);
        return resp.getData();
    }

    /**
     * Получение событий с возможностью фильтрации
     * Обратите внимание:  - это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события - текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв - если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени - информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;EventShortDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EventShortDto>> getEvents1WithHttpInfo(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getEvents1ValidateBeforeCall(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size, null, null);
        Type localVarReturnType = new TypeToken<List<EventShortDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получение событий с возможностью фильтрации (asynchronously)
     * Обратите внимание:  - это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события - текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв - если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени - информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEvents1Async(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size, final ApiCallback<List<EventShortDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEvents1ValidateBeforeCall(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EventShortDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
