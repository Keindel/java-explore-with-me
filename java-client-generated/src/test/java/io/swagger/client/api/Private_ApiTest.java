/*
 * Main service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ApiError;
import io.swagger.client.model.EventFullDto;
import io.swagger.client.model.EventShortDto;
import io.swagger.client.model.NewEventDto;
import io.swagger.client.model.ParticipationRequestDto;
import io.swagger.client.model.UpdateEventRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for Private_Api
 */
@Ignore
public class Private_ApiTest {

    private final Private_Api api = new Private_Api();

    /**
     * Добавление нового события
     *
     * Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addEventTest() throws Exception {
        NewEventDto body = null;
        Long userId = null;
        EventFullDto response = api.addEvent(body, userId);

        // TODO: test validations
    }
    /**
     * Добавление запроса от текущего пользователя на участие в событии
     *
     * Обратите внимание: - нельзя добавить повторный запрос - инициатор события не может добавить запрос на участие в своём событии - нельзя участвовать в неопубликованном событии - если у события достигнут лимит запросов на участие - необходимо вернуть ошибку - если для события отключена пре-модерация запросов на участие, то запрос должен автоматически перейти в состояние подтвержденного
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addParticipationRequestTest() throws Exception {
        Long userId = null;
        Long eventId = null;
        ParticipationRequestDto response = api.addParticipationRequest(userId, eventId);

        // TODO: test validations
    }
    /**
     * Отмена события добавленного текущим пользователем.
     *
     * Обратите внимание: Отменить можно только событие в состоянии ожидания модерации.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelEventTest() throws Exception {
        Long userId = null;
        Long eventId = null;
        EventFullDto response = api.cancelEvent(userId, eventId);

        // TODO: test validations
    }
    /**
     * Отклонение чужой заявки на участие в событии текущего пользователя
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelParticipationRequestTest() throws Exception {
        Long userId = null;
        Long eventId = null;
        Long reqId = null;
        ParticipationRequestDto response = api.cancelParticipationRequest(userId, eventId, reqId);

        // TODO: test validations
    }
    /**
     * Отмена своего запроса на участие в событии
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelRequestTest() throws Exception {
        Long userId = null;
        Long requestId = null;
        ParticipationRequestDto response = api.cancelRequest(userId, requestId);

        // TODO: test validations
    }
    /**
     * Подтверждение чужой заявки на участие в событии текущего пользователя
     *
     * Обратите внимание: - если для события лимит заявок равен 0 или отключена пре-модерация заявок, то подтверждение заявок не требуется - нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие - если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки необходимо отклонить
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void confirmParticipationRequestTest() throws Exception {
        Long userId = null;
        Long eventId = null;
        Long reqId = null;
        ParticipationRequestDto response = api.confirmParticipationRequest(userId, eventId, reqId);

        // TODO: test validations
    }
    /**
     * Получение полной информации о событии добавленном текущим пользователем
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEventTest() throws Exception {
        Long userId = null;
        Long eventId = null;
        EventFullDto response = api.getEvent(userId, eventId);

        // TODO: test validations
    }
    /**
     * Получение информации о запросах на участие в событии текущего пользователя
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEventParticipantsTest() throws Exception {
        Long userId = null;
        Long eventId = null;
        List<ParticipationRequestDto> response = api.getEventParticipants(userId, eventId);

        // TODO: test validations
    }
    /**
     * Получение событий, добавленных текущим пользователем
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws Exception {
        Long userId = null;
        Integer from = null;
        Integer size = null;
        List<EventShortDto> response = api.getEvents(userId, from, size);

        // TODO: test validations
    }
    /**
     * Получение информации о заявках текущего пользователя на участие в чужих событиях
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserRequestsTest() throws Exception {
        Long userId = null;
        List<ParticipationRequestDto> response = api.getUserRequests(userId);

        // TODO: test validations
    }
    /**
     * Изменение события добавленного текущим пользователем
     *
     * Обратите внимание: - изменить можно только отмененные события или события в состоянии ожидания модерации - если редактируется отменённое событие, то оно автоматически переходит в состояние ожидания модерации - дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateEvent1Test() throws Exception {
        UpdateEventRequest body = null;
        Long userId = null;
        EventFullDto response = api.updateEvent1(body, userId);

        // TODO: test validations
    }
}
